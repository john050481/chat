<% layout('./layout/page') -%>
<% block('title', "Чат") -%>

<style>
  .messageWrap {
    display: inline-block;
    margin: 3px;
    padding: 3px;
    border-radius: 5px;
  }
  #contextmenu {
    position: absolute;
    border: 1px solid #bbb;
    background-color: white;
    padding-left: 25px
  }
  #contextmenu li{
    cursor: pointer;
  }
  .newsClass {
    background-color: #d774f5;
    clear: both
  }
  .newsMessage {
    background-color: white;
    transition-property: background-color;
    transition-duration: 2s;
  }
  span[data-message="true"],
  span[data-userid] {
    cursor: pointer;
    white-space: pre-wrap;
  }
  #messageList {
    height: 400px;
    overflow-y: auto;
    float: left;
    width: 70%;
    border-radius: 5px;
    background-color: #f4edd1;
  }
  #usersList {
    height: 100px;
    overflow-y: auto;
    float: right;
    width: 30%;
    text-align: right;
    border-radius: 5px;
    background-color: #a4e0f6;
  }
  #userInfo {
    height: 300px;
    overflow-y: auto;
    float: right;
    width: 30%;
    text-align: right;
    border-radius: 5px;
    background-color: #f5ccd7;
    font-size: 0.7em
  }
  .dateMessage {
    position: relative;
    float: right;
    bottom: -11px;
    right: -5px;
    border: solid 1px #7922CC;
    font-size: 0.7em;
    border-radius: 3px;
    background-color: #d1d1d1;
  }
  .namePublisher {
    position: relative;
    top: -7px;
    left: -2px;
    border: solid 1px #7922CC;
    font-size: 0.7em;
    border-radius: 3px;
  }
  .userList {
    border: solid 1px #7922CC;
    border-radius: 3px;
    font-size: 0.7em;
  }
  .leftColor {
    background-color: #d4b7f0;
  }
  .rightColor {
    background-color: #78f16e;
  }
  .leftMessage {
    text-align: left
  }
  .rightMessage {
    text-align: right
  }
  .centerMessage {
    text-align: center
  }
</style>

<div id = 'news' class = "list-unstyled newsClass">Новости:</div>

<p class="lead">Вы вошли как: <b><%=user.get('username')%></b></p>
<p class="lead">№ чата: <b><%=idChat%></b></p>

<script src="/socket.io/socket.io.js"></script>
<script src="/hashColor.js"></script>

<div id="room">
  <div    id = 'messageList' class = "list-unstyled"></div>
  <aside id = 'usersList'   class = "list-unstyled"></aside>
  <aside id = 'userInfo'    class = "list-unstyled"></aside>

  <div style='clear: both'></div>
  <form>
    <div style="display:inline-block; width: 100%">
      <textarea id = 'input' disabled autocomplete="off" autofocus placeholder="Сообщение..." style="width: 70%"></textarea>
      <input id = 'submit' disabled type="submit" style="width: auto">
    </div>
  </form>
</div>

<fieldset id='anyButtons' disabled style='all: initial; border: solid 1px #000; padding: 0.5em'>
  <legend style='all: initial'>Get INFO</legend>
  <button id='getAllOnLineUsersForNsp' onclick='getAllOnLineUsersForNsp(event)'>Get all online users for nsp</button>
  <button id='getAllIoSocketsForNspAndUserId' onclick='getAllIoSocketsForNspAndUserId(event)'>Get all my online sessions for curent nsp (chat)</button>
  <button id='getAllIoSocketsForUserId' onclick='getAllIoSocketsForUserId(event)'>Get all my online sessions</button>
  <button id='getAllMessageForNsp' onclick='getAllMessageForNsp(event)'>Get all message for nsp (for all the time) (in console)</button>
  <button id='clearMessage' onclick='clearAllMessage()'>Clear message</button>
  <button id='getMyIoAndSession' onclick='getMyIoAndSession(event)'>Get my io and session (in console)</button>
</fieldset>

<script>
  let usernameFromEJS = '<%=user.get('username')%>';
  let userIdFromEJS = '<%=user.get('id')%>';
  let idChat = '<%=idChat%>';
  console.log('usernameFromEJSusernameFromEJSusernameFromEJS = ', usernameFromEJS);
  console.log('userIdFromEJSuserIdFromEJSuserIdFromEJS = ', userIdFromEJS);
  console.log('idChat = ', idChat);
  //console.log('SCRIPT!!!!!!!!!!!!!!!!!! = hashColor = ', hashColor);
  //console.log('window.location = ', window.location);

  let news = $('#news');
  var input = $('#input');
  var submit = $('#submit');
  var messageList = $('#messageList');
  var asideUsersList = $('#usersList');
  var asideUserInfo = $('#userInfo');
  var form = $('#room form');
  let btngetAllOnLineUsersForNsp = $('#getAllOnLineUsersForNsp');
  let anyButtons = $('#anyButtons');

//  var socket = io.connect('', {
//    reconnection: true //false
//  });
  const socket = io('/secretchat-' + idChat);
  const socketRoot = io('/');

  socketRoot
      .on('sendNews', function(text){
          console.log('NEWS ROOT /, socketRoot.id = ', socketRoot.id);
          news.text('');
          let div = $('<div>').addClass('newsMessage').text(text).appendTo(news);
          setTimeout( () => div.css('background-color', '#d774f5'), 100 );
      });

  socket
      .on('error', function(reason) {
        console.log('ERR! sock ERROR!, reason = ', reason, typeof reason);
        if ( (reason == "handshake unauthorized") || (reason == "No session") || (reason == "Anonymous session may not connect") ) {
          printStatus("вы вышли из сайта, по причине: " + reason);
        } else {
          setTimeout(function() {
            console.log('ERR! sock connect again!');
            socket.connect();
          }, 500);
        }
      })
      .on('sendNews', function(text){
        console.log('NEWS for nsp');
        news.text('');
        let div = $('<div>').addClass('newsMessage').text(text).appendTo(news);
        setTimeout( () => div.css('background-color', '#ee886c'), 100 );
      })
      .on('message', function(message, username, userId, created) {
        console.log('on message from server, message, username, userId = ', message, username, userId, created);
        printMessage(message, username, userId, created);
      })
      .on('leave', function(username) {
        printStatus(username + " вышел из чата");
      })
      .on('join', function(username) {
        printStatus(username + " вошёл в чат");
      })
      .on('connect', function() {
        printStatus("соединение установлено, ваш socket.id = " + socket.id);
        form.on('submit', sendMessage);
        input.prop('disabled', false);
        submit.prop('disabled', false);
        anyButtons.prop('disabled', false);
        getAllOnLineUsersForNsp();
      })
      .on('disconnect', function() {
        printStatus("соединение потеряно");
        form.off('submit', sendMessage);
        input.prop('disabled', true);
        submit.prop('disabled', true);
        anyButtons.prop('disabled', true);
        //this.$emit('error');
      })
      .on('logout', function(sid ,cb) {
        clearAllMessage();
        cb && cb(true);
        //window.location.href = "/"
        setTimeout( () => window.location.href = "/", 0 );
      })
      .on('getAllOnLineUsersForNsp', function(users) {
        asideUsersList.text('');
        users.forEach( user => {
          let colorObj = hashColor.getColor(user.userId); //object hashColor => <script src="/hashColor.js">
          $('<span>').addClass('userList leftColor').css({'background-color': '#' + colorObj.colorBackground, color: '#' + colorObj.colorFont}).attr({'data-userid': user.userId}).text(user.username).appendTo(asideUsersList);
        });
      });

  function split_textarea(txt){
      let lines = txt.val().replace(/^[\n\r]+|[\n\r]+$/g,'').split(/[\n\r]+/);
      return lines;
  };

  function sendMessage(e) {

    console.log('lines: ', split_textarea(input));

    var text = input.val();
    if (!text) {
      e.preventDefault();
      input.focus();
      return;
    };
    socket.emit('message', text, function(username, userId, created) {
      console.log("data callback from server socketIO username, userId, created = ", username, userId, created);
      printMessage(text, username, userId, created);
    });

    input.val('');
    input.focus();
    return false;
  }

  function itsMe(username, userId) {
    //console.log(userId === userIdFromEJS, userId, userIdFromEJS);
    //console.log('usernameFromEJS === username   ', usernameFromEJS === username, usernameFromEJS, username);
    return userId === userIdFromEJS;
  };

  function printStatus(status) {
    $('<div>').addClass('centerMessage').append($('<i>').text(status)).appendTo(messageList);
    scrollDown();
  }

  function clearAllMessage() {
    messageList.text('');
  }

  function printMessage(text, username, userId, created) {
    let thisIsMyMessage = itsMe(username, userId);
    let div = $('<div>').addClass(thisIsMyMessage ? 'rightMessage' : 'leftMessage').appendTo(messageList);
    let divMessage = $('<div>').addClass('messageWrap').addClass(thisIsMyMessage ? 'rightColor' : 'leftColor').appendTo(div)
    if (!thisIsMyMessage) {
      let colorObj = hashColor.getColor(userId); //object hashColor => <script src="/hashColor.js">
      $('<span>').addClass('namePublisher').css({'background-color': '#' + colorObj.colorBackground, color: '#' + colorObj.colorFont}).attr({'data-userid': userId}).text(thisIsMyMessage ? '' : username).appendTo(divMessage);
      $('<br>').appendTo(divMessage);
    };
    $('<span>').attr({'data-message': true}).text(text).appendTo(divMessage);

    let date = new Date(created);
    let formatDate = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);
    let formatTime = ('0' + date.getHours()).slice(-2) +':'+ ('0' + date.getMinutes()).slice(-2) //+':'+  ('0' + date.getSeconds()).slice(-2);
    $('<span>').addClass('dateMessage').text(formatDate +' '+ formatTime).appendTo(divMessage);

    scrollDown();
  };

  function scrollDown() {
    //console.log(messageList, messageList.scrollTop, messageList.scrollHeight);
    messageList.scrollTop(messageList.get(0).scrollHeight);
  };

  function getAllOnLineUsersForNsp(e) {
    socket.emit('getAllOnLineUsersForNsp', 'anyData', function(users) {
      console.log("data callback from server socketIO, users = ", users);
      asideUserInfo.text('');
      users.forEach(user => {
        $('<div>').text('-----').appendTo(asideUserInfo);
        for (let key in user)
        $('<div>').text(key + ': ' + user[key]).appendTo(asideUserInfo);
      });
    });
  };

  function getAllIoSocketsForNspAndUserId(e) {
    socket.emit('getAllIoSocketsForNspAndUserId', 'anyData', function(mySockets) {
      console.log("data callback from server socketIO, mySockets = ", mySockets);
      asideUserInfo.text('');
      mySockets.forEach(session => {
        $('<div>').text('-----').appendTo(asideUserInfo);
        for (let key in session)
          $('<div>').text(key + ': ' + session[key]).appendTo(asideUserInfo);
      });
    });
  };

  function getAllIoSocketsForUserId(e) {
    socket.emit('getAllIoSocketsForUserId', 'anyData', function(mySockets) {
      console.log("data callback from server socketIO, mySockets = ", mySockets);
      asideUserInfo.text('');
      mySockets.forEach(session => {
        $('<div>').text('-----').appendTo(asideUserInfo);
        for (let key in session)
        $('<div>').text(key + ': ' + session[key]).appendTo(asideUserInfo);
      });
    });
  };

  function getUserInfo(userId) {
    //console.log("getUserInfo for usernames/id = ", e.target.name, e.target.id);
    socket.emit('getUserInfo', userId, function(userInfo) {
      //console.log("data callback from server socketIO, userInfo = ", userInfo);
      asideUserInfo.text('');
      for (let key in userInfo)
        $('<div>').text(key + ': ' + userInfo[key]).appendTo(asideUserInfo);
    });
  };

  function getAllMessageForNsp(e) {
    socket.emit('getAllMessageForNsp', function(results) {
      messageList.text('');

      console.log('#################################### messages');
      results.forEach( message => {
        console.log('########');
        for (let key in message) console.log(key, ' = ', message[key]);
        printMessage(message.message, message.username, message.userId, message.created);
      });
      console.log('####################################');
    });
  };

  function getMyIoAndSession(e) {
    socket.emit('getMyIoAndSession', function(results) {
      console.log('####################################');
      console.log('Более полную и детальную информацию о сессии и сокетах смотрите в консоли НОДы!!!');
      console.log('####################################');
      for (let key in results) console.log(key, ' = ', results[key]);
      console.log('####################################');
    });
  };

  let room = document.getElementById('room');
  room.addEventListener('click', (e) => {
    $('#contextmenu').off().remove();
    userId = e.target.dataset.userid;
    itsMessage = e.target.dataset.message;
    if (userId) {
      getUserInfo(userId);
      //console.log(userId);
    };
    if (itsMessage) {
      input.val('"' + e.target.innerHTML + '" ');
      input.focus();
      //console.log(e.target.innerHTML);
    };
  });

  room.addEventListener("contextmenu", (e) => {
    e.preventDefault();
    $('#contextmenu').off().remove();
    let menu = $('<ul>').attr({id: 'contextmenu'}).addClass('contextmenu').css({left: e.pageX, top: e.pageY}).appendTo($('body')).click(function(e){console.log(e.target)});
    $('<li>').text('item1').appendTo(menu);
    $('<li>').text('item2').appendTo(menu);
    $('<li>').text('item3').appendTo(menu);
  });

</script>
